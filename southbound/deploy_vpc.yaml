- name: Deploy VPC Infrastructure with network namespace
  hosts: localhost
  gather_facts: no
  become: true

  tasks:
    # - name: Retrieve data from etcd
    #   command: python3 retrive_etcd.py {{ item }}
    #   register: tenant_data
    #   loop: "{{ tenant_name }}"

    - name: Parse retrieved data
      set_fact:
        tenant_data_parsed: "{{ tenant_data | from_yaml }}" #.results[0].stdout.split('\n')[1]
   
    - name: Debug tenant_data_parsed
      debug:
        var: tenant_data_parsed

    # - name: Get list of existing namespaces
    #   command: ip netns list
    #   register: existing_namespaces
    #   changed_when: false

    - name: Create namespaces for each VPC
      command: ip netns add {{ vpc_name }}
      # loop: "{{ tenant_data_parsed | dict2items | map(attribute='value.vpcs') | flatten }}"
      # loop_control:
      #   loop_var: item
      # when: "'{{ item.name }}' not in existing_namespaces.stdout"  

    # - name: Process VPCs for subnetting and interface setup
    #   include_tasks: setup_vpc_interfaces.yml
    #   loop: "{{ tenant_data_parsed | dict2items | map(attribute='value.vpcs') | flatten }}"
    #   loop_control:
    #     loop_var: vpc

    - name: Get /30 subnet for current VPC
      command: python3 subnetting.py
      register: vpc_subnet_output

    - name: Debug vpc subnet output
      debug:
        msg: "Subnet for {{ vpc_name }}: {{ vpc_subnet_output.stdout }}"

    - name: Create veth pair for current VPC
      command: >
        ip link add {{ vpc_name }}_veth0 type veth peer name {{ vpc_name }}_veth1

    - name: Activate veth0 in default namespace
      command: "ip link set {{ vpc_name }}_veth0 up"

    - name: Assign IP to veth0 in the default namespace
      command: >
        ip addr add {{ vpc_subnet_output.stdout | ipaddr('network') | ipmath(1) }}/30 dev {{ vpc_name }}_veth0

    - name: Move one end of the veth pair (veth1) to the corresponding namespace
      command: ip link set {{ vpc_name }}_veth1 netns {{ vpc_name }}

    - name: Assign IP to veth1 in the corresponding namespace
      command: >
        ip netns exec {{ vpc_name }} ip addr add {{ vpc_subnet_output.stdout | ipaddr('network') | ipmath(2) }}/30 dev {{ vpc_name }}_veth1

    - name: Activate veth1 in corresponding namespace
      command: "ip netns exec {{ vpc_name }} ip link set {{ vpc_name }}_veth1 up"

    # - name: Add route in root namespace to reach VPC subnet via vpc_veth1 IP
    #   ignore_errors: true
    #   command: >
    #     ip route add {{ item.CIDR }} via {{ vpc_subnet_output.stdout | ipaddr('network') | ipmath(2) }}
    #   loop: "{{ vpc.subnets }}"
    #   loop_control:
    #     loop_var: item

    - name: Activate loopback interface in the network namespace
      command: ip netns exec {{ vpc_name }} ip link set lo up


    - name: Add default route in VPC namespace via vpc_veth0 IP
      command: >
        ip netns exec {{ vpc_name }} ip route add default via {{ vpc_subnet_output.stdout | ipaddr('network') | ipmath(1) }}

    - name: Set up NAT for the VPC's external interface
      command: ip netns exec {{ vpc_name }} iptables -t nat -A POSTROUTING -o {{ vpc_name }}_veth1 -j MASQUERADE

