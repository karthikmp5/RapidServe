- name: Deploy Origin Server with Network Setup
  hosts: localhost
  gather_facts: no
  become: true

  vars:
    vpc_name: "origin_ns"
    bridge_name: "origin_bridge"
    vm_name: "origin_server_vm"
    base_image_path: "/var/lib/libvirt/images/base-vm-image.qcow2"  # Ensure the correct path
    vm_disk_size: "12G"
    cloud_init_path: "/var/lib/libvirt/images/{{ vm_name }}"

    # Networking
    veth_ns_to_root: "origin_ns"
    veth_root_to_ns: "origin_root"
    root_ip: "10.10.1.2/30"
    ns_ip: "10.10.1.1/30"
    bridge_subnet: "10.10.20.0/24"
    bridge_gateway_ip: "10.10.20.1"
    veth_ns_to_bridge: "origin_nsbridge"
    veth_bridge_to_ns: "origin_bridgens"
    ns_bridge_ip: "10.10.20.2/24"

  tasks:
    - name: Create network namespace
      command: ip netns add {{ vpc_name }}

    - name: Create bridge in root namespace
      command: ip link add name {{ bridge_name }} type bridge

    - name: Set bridge up
      command: ip link set {{ bridge_name }} up

    - name: Create veth pair for NS to root connectivity
      command: ip link add {{ veth_root_to_ns }} type veth peer name {{ veth_ns_to_root }}

    - name: Attach one end of veth to the network namespace
      command: ip link set {{ veth_ns_to_root }} netns {{ vpc_name }}

    - name: Assign IP to veth in root namespace
      command: ip addr add {{ root_ip }} dev {{ veth_root_to_ns }}

    - name: Bring up veth in root namespace
      command: ip link set {{ veth_root_to_ns }} up

    - name: Assign IP to veth in network namespace
      command: ip netns exec {{ vpc_name }} ip addr add {{ ns_ip }} dev {{ veth_ns_to_root }}

    - name: Bring up veth in network namespace
      command: ip netns exec {{ vpc_name }} ip link set {{ veth_ns_to_root }} up

    - name: Create veth pair for NS to bridge connectivity
      command: ip link add {{ veth_ns_to_bridge }} type veth peer name {{ veth_bridge_to_ns }}

    - name: Attach one end of the veth pair to the network namespace
      command: ip link set {{ veth_ns_to_bridge }} netns {{ vpc_name }}

    - name: Connect the other end to the bridge
      command: ip link set {{ veth_bridge_to_ns }} master {{ bridge_name }}

    - name: Assign IP to veth in network namespace for bridge connection
      command: ip netns exec {{ vpc_name }} ip addr add {{ ns_bridge_ip }} dev {{ veth_ns_to_bridge }}

    - name: Bring up the veth in network namespace for bridge connection
      command: ip netns exec {{ vpc_name }} ip link set {{ veth_ns_to_bridge }} up

    - name: Bring up the veth on the bridge side
      command: ip link set {{ veth_bridge_to_ns }} up

    - name: Setup DHCP on origin_nsbridge within the origin_ns namespace
      command: >
        ip netns exec {{ vpc_name }} dnsmasq
        --interface={{ veth_ns_to_bridge }}
        --bind-interfaces
        --dhcp-range=10.10.20.5,10.10.20.254,24h
    
    - name: Activate loopback interface in the network namespace
      command: ip netns exec {{ vpc_name }} ip link set lo up

    - name: Enable IP forwarding in the root namespace
      command: sysctl -w net.ipv4.ip_forward=1

    - name: Setup NAT and IP masquerading for packets leaving origin_ns
      command: ip netns exec {{ vpc_name }} iptables -t nat -A POSTROUTING -o {{ veth_ns_to_root }} -j MASQUERADE

    - name: Allow forwarding from origin_ns to the bridge interface
      command: ip netns exec {{ vpc_name }} iptables -A FORWARD -i {{ veth_ns_to_bridge }} -o {{ veth_ns_to_root }} -j ACCEPT

    - name: Allow established and related connections back to the namespace
      command: ip netns exec {{ vpc_name }} iptables -A FORWARD -i {{ veth_ns_to_root }} -o {{ veth_ns_to_bridge }} -m state --state RELATED,ESTABLISHED -j ACCEPT

    - name: Add default route in origin_ns namespace
      command: ip netns exec {{ vpc_name }} ip route add default via {{ root_ip | ipaddr('address') }}

    - name: Add route in root namespace to reach 10.10.20.0/24 subnet
      command: ip route add {{ bridge_subnet }} via {{ ns_ip | ipaddr('address') }}

    - name: Ensure VM image directory exists
      file:
        path: "{{ cloud_init_path }}"
        state: directory
        owner: root
        group: root
        mode: "0755"

    - name: Deploy cloud-init meta-data for VM
      copy:
        dest: "{{ cloud_init_path }}/meta-data"
        content: |
          instance-id: iid-{{ vm_name }}
          local-hostname: {{ vm_name }}
        owner: root
        group: root
        mode: "0644"

    - name: Deploy cloud-init user-data for VM
      copy:
        dest: "{{ cloud_init_path }}/user-data"
        content: |
          #cloud-config
          bootcmd:
            - echo "nameserver 8.8.8.8" > /etc/resolv.conf
          disable_root: false
          ssh_authorized_keys:
            - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC3ttzAq6NSC/s43UaygR3DcaHIhUd6qMZTonB2NmVGUw6fM261+1i0VigfiJHYe5l6Nh6QtNLvBzI980n+qL/WJQkiJ1KL3+VAK7k3RBsnEBuEqmrErX2JHTrXdh0J+L2Ly3tiI0hVATFsaNGbyLU04EmUyz9j7adknuU26/cFqxMjddlrGaBcDW4d7T522twV7vm8z9MOO+AcfcaJLOcE4+jYlu72w2pQz5znE1RGj0pfGqlcc7YdM/+dmvaQb1pssoc5NedwrWJ510Cqp5jABVz10jbvIsouC2ao0o+l1jNOI8fsddT5skf19IIW5t6GCgfVbOJ5Vbik6j1PBWFJ vmadm@lnVM08
          users:
            - default
            - name: root
              lock_passwd: false
              plain_text_passwd: 'admin'
            - name: ubuntu
              lock_passwd: false
              plain_text_passwd: 'admin'
          network:
            version: 2
            renderer: networkd
            ethernets:
              ens4:
                dhcp4: true
          packages:
            - nginx
          runcmd:
            - "for i in /sys/class/net/*; do intf=$(basename $i); [ \"$intf\" != \"lo\" ] && ip link set $intf up and dhclient $intf; done"
            - systemctl enable nginx
            - systemctl start nginx
        owner: root
        group: root
        mode: "0644"

    - name: Generate CIDATA ISO for cloud-init
      command: genisoimage -output {{ cloud_init_path }}/{{ vm_name }}-cidata.iso -volid cidata -joliet -rock {{ cloud_init_path }}/user-data {{ cloud_init_path }}/meta-data

    - name: Create VM disk from base image
      command: "qemu-img create -f qcow2 -F qcow2 -o backing_file=/var/lib/libvirt/images/jammy-server-cloudimg-amd64.img {{ cloud_init_path }}/{{ vm_name }}.qcow2"

    - name: Allocate space for QCOW2 images
      command: "qemu-img resize {{ cloud_init_path }}/{{ vm_name }}.qcow2 {{ vm_disk_size }}"
        
    - name: Initialize VM connected to the bridge
      command: >
        virt-install --virt-type=kvm --name={{ vm_name }} --ram=2048 --vcpus=2
        --disk path={{ cloud_init_path }}/{{ vm_name }}.qcow2,format=qcow2
        --disk path={{ cloud_init_path }}/{{ vm_name }}-cidata.iso,device=cdrom
        --network bridge={{ bridge_name }},model=virtio
        --os-variant=generic --graphics none --import --noautoconsole

